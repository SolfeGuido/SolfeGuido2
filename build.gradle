buildscript {
    ext.kotlinVersion = '1.4.30'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

    }
}

allprojects {

    version = '2.0'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "kotlin"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}

/*
project(":android") {
    apply plugin: "android"
    apply plugin: "kotlin-android"

    configurations { natives }

    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
        api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}
 */

project(":core") {
    apply plugin: "kotlin"


    dependencies {
        implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutinesVersion
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        implementation "io.github.libktx:ktx-app:$ktxVersion"
        implementation "io.github.libktx:ktx-actors:$ktxVersion"
        implementation "io.github.libktx:ktx-async:$ktxVersion"
        implementation "io.github.libktx:ktx-assets-async:$ktxVersion"
        implementation "io.github.libktx:ktx-collections:$ktxVersion"
        implementation "io.github.libktx:ktx-assets:$ktxVersion"
        implementation "io.github.libktx:ktx-freetype:$ktxVersion"
        implementation "io.github.libktx:ktx-i18n:$ktxVersion"
        implementation "io.github.libktx:ktx-inject:$ktxVersion"
        implementation "io.github.libktx:ktx-json:$ktxVersion"
        implementation "io.github.libktx:ktx-log:$ktxVersion"
        implementation "io.github.libktx:ktx-scene2d:$ktxVersion"
        implementation "io.github.libktx:ktx-style:$ktxVersion"
    }
}

task nls{
    def project = 'core'
    def source = 'src'
    def pack = 'io.github.solfeguido.enums'
    def name = 'Nls'
    def fileName = 'nls.kt'
    def bundle = 'core/assets/i18n/nls.properties'

    println("Processing i18n bundle file at ${bundle}...")
    def builder = new StringBuilder()
    builder.append("""package ${pack}
import ktx.i18n.BundleLine
/** Generated from ${bundle} file. */
enum class ${name}(private val key: String) : BundleLine {
""")
    def newLine = System.getProperty("line.separator")
    file(bundle).eachLine {
        def data = it.trim()
        def separator = data.indexOf('=')
        if (!data.isEmpty() && separator > 0 && !data.startsWith('#')) {
            def id = data.substring(0, separator).trim()
            def decl = id.split('[._]').collect{str -> str.capitalize()}.join('')
            builder.append('    ').append(decl).append('("').append(id).append('")').append(',').append(newLine)
        }
    }
    // If you want a custom enum body, replace the following append:
    builder.append('    ;').append(newLine).append("""
    override fun toString() = key
""").append('}').append(newLine)

    source = source.replace('/', File.separator)
    pack = pack.replace('.', File.separator)
    def path = project + File.separator + source + File.separator + pack +
            File.separator + fileName
    println("Saving i18n bundle enum at ${path}...")
    def enumFile = file(path)
    delete enumFile
    enumFile.getParentFile().mkdirs()
    enumFile.createNewFile()
    enumFile << builder << newLine
    println("Done. I18n bundle enum generated.")
}